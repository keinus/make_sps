"""
This type stub file was generated by pyright.
"""

from typing import Any, Literal

class ParamHelpers:
    """
    파라미터 헬퍼메서드 : 별도의 동작은 하지 않고, 파라미터 변환, 연산 등을 돕는다.
    """
    hwp: Any
    def BorderShape(self, border_type): # -> Any:
        ...
    
    def ArcType(self, arc_type): # -> Any:
        ...
    
    def AutoNumType(self, autonum): # -> Any:
        ...
    
    def BreakWordLatin(self, break_latin_word): # -> Any:
        ...
    
    def BrushType(self, brush_type): # -> Any:
        ...
    
    def Canonical(self, canonical): # -> Any:
        ...
    
    def CellApply(self, cell_apply): # -> Any:
        ...
    
    def CharShadowType(self, shadow_type): # -> Any:
        ...
    
    def ColDefType(self, col_def_type): # -> Any:
        ...
    
    def ColLayoutType(self, col_layout_type): # -> Any:
        ...
    
    def ConvertPUAHangulToUnicode(self, reverse): # -> Any:
        ...
    
    def CrookedSlash(self, crooked_slash): # -> Any:
        ...
    
    def DSMark(self, diac_sym_mark): # -> Any:
        ...
    
    def DbfCodeType(self, dbf_code): # -> Any:
        ...
    
    def Delimiter(self, delimiter): # -> Any:
        ...
    
    def DrawAspect(self, draw_aspect): # -> Any:
        ...
    
    def DrawFillImage(self, fillimage): # -> Any:
        ...
    
    def DrawShadowType(self, shadow_type): # -> Any:
        ...
    
    def Encrypt(self, encrypt): # -> Any:
        ...
    
    def EndSize(self, end_size): # -> Any:
        ...
    
    def EndStyle(self, end_style): # -> Any:
        ...
    
    def FillAreaType(self, fill_area): # -> Any:
        ...
    
    def FindDir(self, find_dir: Literal["Forward", "Backward", "AllDoc"] = ...): # -> Any:
        ...
    
    def FontType(self, font_type): # -> Any:
        ...
    
    def GetTranslateLangList(self, cur_lang): # -> Any:
        ...
    
    def GetUserInfo(self, user_info_id): # -> Any:
        ...
    
    def Gradation(self, gradation): # -> Any:
        ...
    
    def GridMethod(self, grid_method): # -> Any:
        ...
    
    def GridViewLine(self, grid_view_line): # -> Any:
        ...
    
    def GutterMethod(self, gutter_type): # -> Any:
        ...
    
    def HAlign(self, h_align): # -> Any:
        ...
    
    def Handler(self, handler): # -> Any:
        ...
    
    def Hash(self, hash): # -> Any:
        ...
    
    def HatchStyle(self, hatch_style): # -> Any:
        ...
    
    def HeadType(self, heading_type): # -> Any:
        ...
    
    def HeightRel(self, height_rel): # -> Any:
        ...
    
    def Hiding(self, hiding): # -> Any:
        ...
    
    def HorzRel(self, horz_rel): # -> Any:
        ...
    
    def HwpLineType(self, line_type: Literal["None", "Solid", "Dash", "Dot", "DashDot", "DashDotDot", "LongDash", "Circle", "DoubleSlim", "SlimThick", "ThickSlim", "SlimThickSlim",] = ...): # -> Any:
        """
        한/글에서 표나 개체의 선 타입을 결정하는 헬퍼메서드. 단순히 문자열을 정수로 변환한다.

        Args:
            line_type:
                문자열 파라미터. 종류는 아래와 같다.

                    - "None": 없음(0)
                    - "Solid": 실선(1)
                    - "Dash": 파선(2)
                    - "Dot": 점선(3)
                    - "DashDot": 일점쇄선(4)
                    - "DashDotDot": 이점쇄선(5)
                    - "LongDash": 긴 파선(6)
                    - "Circle": 원형 점선(7)
                    - "DoubleSlim": 이중 실선(8)
                    - "SlimThick": 얇고 굵은 이중선(9)
                    - "ThickSlim": 굵고 얇은 이중선(10)
                    - "SlimThickSlim": 얇고 굵고 얇은 삼중선(11)
        """
        ...
    
    def HwpLineWidth(self, line_width: Literal["0.1mm", "0.12mm", "0.15mm", "0.2mm", "0.25mm", "0.3mm", "0.4mm", "0.5mm", "0.6mm", "0.7mm", "1.0mm", "1.5mm", "2.0mm", "3.0mm", "4.0mm", "5.0mm",] = ...) -> int:
        """
        선 너비를 정해주는 헬퍼 메서드.

        목록은 아래와 같다.

        Args:
            line_width:

                - "0.1mm": 0
                - "0.12mm": 1
                - "0.15mm": 2
                - "0.2mm": 3
                - "0.25mm": 4
                - "0.3mm": 5
                - "0.4mm": 6
                - "0.5mm": 7
                - "0.6mm": 8
                - "0.7mm": 9
                - "1.0mm": 10
                - "1.5mm": 11
                - "2.0mm": 12
                - "3.0mm": 13
                - "4.0mm": 14
                - "5.0mm": 15

        Returns:
            hwp가 인식하는 선굵기 정수(0~15)
        """
        ...
    
    def HwpOutlineStyle(self, hwp_outline_style): # -> Any:
        ...
    
    def HwpOutlineType(self, hwp_outline_type): # -> Any:
        ...
    
    def HwpUnderlineShape(self, hwp_underline_shape): # -> Any:
        ...
    
    def HwpUnderlineType(self, hwp_underline_type): # -> Any:
        ...
    
    def HwpZoomType(self, zoom_type): # -> Any:
        ...
    
    def ImageFormat(self, image_format): # -> Any:
        ...
    
    def LineSpacingMethod(self, line_spacing): # -> Any:
        ...
    
    def LineWrapType(self, line_wrap): # -> Any:
        ...
    
    def LunarToSolar(self, l_year, l_month, l_day, l_leap, s_year, s_month, s_day): # -> Any:
        ...
    
    def LunarToSolarBySet(self, l_year, l_month, l_day, l_leap): # -> Any:
        ...
    
    def MacroState(self, macro_state): # -> Any:
        ...
    
    def MailType(self, mail_type): # -> Any:
        ...
    
    def mili_to_hwp_unit(self, mili: float) -> int:
        ...
    
    def MiliToHwpUnit(self, mili: float) -> int:
        ...
    
    @staticmethod
    def hwp_unit_to_mili(hwp_unit: int) -> float:
        """
        HwpUnit 값을 밀리미터로 변환한 값을 리턴한다.

        HwpUnit으로 리턴되었거나, 녹화된 코드의 HwpUnit값을 확인할 때 유용하게 사용할 수 있다.

        Returns:
            HwpUnit을 7200으로 나눈 후 25.4를 곱하고 소숫점 셋째자리에서 반올림한 값
        """
        ...
    
    def HwpUnitToMili(self, hwp_unit: int) -> float:
        ...
    
    def NumberFormat(self, num_format: Literal["Digit", "CircledDigit", "RomanCapital", "RomanSmall", "LatinCapital", "LatinSmall", "CircledLatinCapital", "CircledLatinSmall", "HangulSyllable", "CircledHangulSyllable", "HangulJamo", "CircledHangulJamo", "HangulPhonetic", "Ideograph", "CircledIdeograph", "DecagonCircle", "DecagonCircleHanja",]): # -> Any:
        """
        개요번호 사용자 정의를 위해 미리 정의된 포맷 모음
        
        Args:
            num_format(str):
                포맷 종류.

                    - "Digit": 123
                    - "CircledDigit": ①
                    - "RomanCapital": I
                    - "RomanSmall": i
                    - "LatinCapital": A
                    - "LatinSmall": a
                    - "CircledLatinCapital": Ⓐ
                    - "CircledLatinSmall": ⓐ
                    - "HangulSyllable": 가나다
                    - "CircledHangulSyllable": ㉯
                    - "HangulJamo": ㄱㄴㄷ
                    - "CircledHangulJamo": ㉠
                    - "HangulPhonetic": 일이삼
                    - "Ideograph": 一
                    - "CircledIdeograph": ㊀
                    - "DecagonCircle": 갑을병
                    - "DecagonCircleHanja": 甲

        Returns:
            int: 해당 정수로 치환됨(Digit=0, CircledDigit=1, ... DecagonCircleHanja=16)

        Examples:
            >>> # 개요번호 사용자 정의
            >>> from pyhwpx import Hwp
            >>> hwp = Hwp(new=True)
            >>> pset = hwp.HParameterSet.HSecDef
            >>> hwp.HAction.GetDefault("OutlineNumber", pset.HSet)
            >>> pset.OutlineShape.StrFormatLevel0 = "^1."
            >>> pset.OutlineShape.NumFormatLevel0 = hwp.NumberFormat("RomanCapital")  # <---
            >>> pset.OutlineShape.StartNumber0 = 1
            >>> pset.OutlineShape.NewList = 0
            >>> pset.HSet.SetItem("ApplyClass", 24)  # 앞 구역의 개요 번호에 이어서
            >>> pset.HSet.SetItem("ApplyTo", 3)  # 적용범위(2:현재구역, 3:문서 전체, 4:새 구역으로)
            >>> hwp.HAction.Execute("OutlineNumber", pset.HSet)
            True
        """
        ...
    
    def Numbering(self, numbering): # -> Any:
        ...
    
    def PageNumPosition(self, pagenumpos: Literal["TopLeft", "TopCenter", "TopRight", "BottomLeft", "BottomCenter", "BottomRight", "InsideTop", "OutsideTop", "InsideBottom", "OutsideBottom", "None",] = ...): # -> Any:
        ...
    
    def PageType(self, page_type): # -> Any:
        ...
    
    def ParaHeadAlign(self, para_head_align): # -> Any:
        ...
    
    def PicEffect(self, pic_effect): # -> Any:
        ...
    
    def PlacementType(self, restart): # -> Any:
        ...
    
    def PresentEffect(self, prsnteffect): # -> Any:
        ...
    
    def PrintDevice(self, print_device): # -> Any:
        ...
    
    def PrintPaper(self, print_paper): # -> Any:
        ...
    
    def PrintRange(self, print_range): # -> Any:
        ...
    
    def PrintType(self, print_method): # -> Any:
        ...
    
    def SetCurMetatagName(self, tag): # -> Any:
        ...
    
    def SetDRMAuthority(self, authority): # -> Any:
        ...
    
    def SetUserInfo(self, user_info_id, value): # -> Any:
        ...
    
    def SideType(self, side_type): # -> Any:
        ...
    
    def Signature(self, signature): # -> Any:
        ...
    
    def Slash(self, slash): # -> Any:
        ...
    
    def SolarToLunar(self, s_year, s_month, s_day, l_year, l_month, l_day, l_leap): # -> Any:
        ...
    
    def SolarToLunarBySet(self, s_year, s_month, s_day): # -> Any:
        ...
    
    def SortDelimiter(self, sort_delimiter): # -> Any:
        ...
    
    def StrikeOut(self, strike_out_type): # -> Any:
        ...
    
    def StyleType(self, style_type): # -> Any:
        ...
    
    def SubtPos(self, subt_pos): # -> Any:
        ...
    
    def TableBreak(self, page_break): # -> Any:
        ...
    
    def TableFormat(self, table_format): # -> Any:
        ...
    
    def TableSwapType(self, tableswap): # -> Any:
        ...
    
    def TableTarget(self, table_target): # -> Any:
        ...
    
    def TextAlign(self, text_align): # -> Any:
        ...
    
    def TextArtAlign(self, text_art_align): # -> Any:
        ...
    
    def TextDir(self, text_direction): # -> Any:
        ...
    
    def TextFlowType(self, text_flow): # -> Any:
        ...
    
    def TextWrapType(self, text_wrap): # -> Any:
        ...
    
    def VAlign(self, v_align): # -> Any:
        ...
    
    def VertRel(self, vert_rel): # -> Any:
        ...
    
    def ViewFlag(self, view_flag): # -> Any:
        ...
    
    def WatermarkBrush(self, watermark_brush): # -> Any:
        ...
    
    def WidthRel(self, width_rel): # -> Any:
        ...
    


